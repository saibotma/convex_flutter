// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `LocalQuery`, `LocalSyncState`, `OptimisticQueryResults`, `QueryToken`, `Query`, `RemoteQuerySet`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `cmp`, `cmp`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `hash`, `partial_cmp`, `partial_cmp`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `default`, `default`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BaseConvexClient>>
abstract class BaseConvexClient implements RustOpaqueInterface {
  /// Track action and add action request to the outgoing message queue.
  ///
  /// After calling this, it is highly recommended to loop on
  /// [`pop_next_message`](Self::pop_next_message()) to flush websocket
  /// messages to the server.
  Future<ReceiverFunctionResult> action({
    required UdfPath udfPath,
    required BTreeMapStringValue args,
  });

  /// Return the local value of a query.
  Future<FunctionResult?> getQuery({required QueryId queryId});

  /// Grab a snapshot of the latest query results to all subscribed queries.
  Future<void> latestResults();

  /// Returns the maximum timestamp observed by the client.
  Future<Timestamp?> maxObservedTimestamp();

  /// Track mutation and add mutation request to the outgoing message queue.
  ///
  /// After calling this, it is highly recommended to loop on
  /// [`pop_next_message`](Self::pop_next_message()) to flush websocket
  /// messages to the server.
  Future<ReceiverFunctionResult> mutation({
    required UdfPath udfPath,
    required BTreeMapStringValue args,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Construct a new [`BaseConvexClient`].
  static Future<BaseConvexClient> newInstance() =>
      RustLib.instance.api.convexBaseClientBaseConvexClientNew();

  /// Pop the next message from the outgoing message queue.
  ///
  /// Note that this does not *send* the message because the Internal client
  /// has no awareness of websockets. After popping the next message, it is
  /// the caller's responsibility to actually send it.
  Future<ClientMessage?> popNextMessage();

  /// Given a message from a Server, update the base state accordingly.
  Future<QueryResults?> receiveMessage({required ServerMessage message});

  /// Resend all subscribed queries and ongoing mutations. Should be used once
  /// the websocket closes and reconnects.
  Future<void> resendOngoingQueriesMutations();

  /// Set auth on the sync protocol.
  Future<void> setAuth({required AuthenticationToken token});

  /// Update state to be subscribed to a query and add subscription request to
  /// the outgoing message queue.
  ///
  /// After calling this, it is highly recommended to loop on
  /// [`pop_next_message`](Self::pop_next_message()) to flush websocket
  /// messages to the server.
  Future<SubscriberId> subscribe({
    required UdfPath udfPath,
    required BTreeMapStringValue args,
  });

  /// Update state to be unsubscribed to a query and add unsubscription
  /// request to the outgoing message queue.
  ///
  /// After calling this, it is highly recommended to loop on
  /// [`pop_next_message`](Self::pop_next_message()) to flush websocket
  /// messages to the server.
  Future<void> unsubscribe({required SubscriberId subscriberId});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FunctionResult>>
abstract class FunctionResult implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QueryResults>>
abstract class QueryResults implements RustOpaqueInterface {
  static Future<QueryResults> default_() =>
      RustLib.instance.api.convexBaseClientQueryResultsDefault();

  /// Get the [`FunctionResult`] for the given [`SubscriberId`]
  Future<FunctionResult?> get_({required SubscriberId subscriberId});

  /// Test whether the map is empty.
  Future<bool> isEmpty();

  /// Get the size of the map.
  Future<BigInt> len();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Receiver < FunctionResult >>>
abstract class ReceiverFunctionResult implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReconnectProtocolReason>>
abstract class ReconnectProtocolReason implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServerMessage>>
abstract class ServerMessage implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SubscriberId>>
abstract class SubscriberId implements RustOpaqueInterface {
  static Future<SubscriberId> default_() =>
      RustLib.instance.api.convexBaseClientSubscriberIdDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Timestamp>>
abstract class Timestamp implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UdfPath>>
abstract class UdfPath implements RustOpaqueInterface {}
